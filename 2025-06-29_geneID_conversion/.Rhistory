if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Hs.eg.db")
library(org.Hs.eg.db)
?org.Hs.eg
keytypes(org.Hs.eg.db)
help("UNIPROT")
help("SYMBOL")
# show all identifiers available in this dataset
keytypes(org.Hs.eg.db)
help("SYMBOL")
?select
select(org.Hs.eg.db,
keys = "ENSG00000108342",
keytype = "ENSEMBL",
columns = c("ENTREZID","SYMBOL","GENENAME"))
select(org.Hs.eg.db,
keys = "ENSG00000108342", # Ensembl ID we want to find identifiers for
keytype = "ENSEMBL", # tells the function that we are using an Ensembl ID as our reference
columns = c("ENTREZID","SYMBOL","GENENAME")) # selects the identifiers we are interested in
keys(org.Hs.eg.db,
keytype = "ENSEMBL")
?keys
keys(org.Hs.eg.db, # keys function returns all entries of the specified keytype
keytype = "ENSEMBL") -> ensembl_key
length(ensembl_key)
head(ensembl_key)
select(org.Hs.eg.db,
keys = ensembl_key,
keytype = "ENSEMBL",
columns = c("ENTREZID","SYMBOL","GENENAME"))
select(org.Hs.eg.db,
keys = ensembl_key,
keytype = "ENSEMBL",
columns = c("ENTREZID","SYMBOL","GENENAME")) -> conv_table
head(conv_table)
dim(conv_table)
length(ensembl_key) # provides the number of identifiers in our key set
dim(conv_table)
summary(duplicated(conv_table$ENSEMBL))
summary(duplicated(conv_table$ENTREZID))
summary(duplicated(conv_table$SYMBOL))
summary(duplicated(conv_table$UNIPROT))
summary(duplicated(conv_table$ENSEMBL))
summary(duplicated(conv_table$ENTREZID))
summary(duplicated(conv_table$SYMBOL))
summary(duplicated(conv_table$UNIPROT))
View(conv_table)
keys(org.Hs.eg.db, # keys function returns all entries of the specified keytype
keytype = "ENSEMBL") -> ensembl_key
length(ensembl_key) # provides the number of identifiers in our key set - 40839 IDs
head(ensembl_key)
# now we can use our vector of Ensembl IDs inside the select function to build a conversion table
select(org.Hs.eg.db,
keys = ensembl_key,
keytype = "ENSEMBL",
columns = c("ENTREZID","SYMBOL","GENENAME","UNIPROT")) -> conv_table
dim(conv_table) # report the dimensions of our conversion table
keys(org.Hs.eg.db, # keys function returns all entries of the specified keytype
keytype = "ENSEMBL") -> ensembl_key
length(ensembl_key) # provides the number of identifiers in our key set - 40839 IDs
head(ensembl_key)
# now we can use our vector of Ensembl IDs inside the select function to build a conversion table
select(org.Hs.eg.db,
keys = ensembl_key,
keytype = "ENSEMBL",
columns = c("ENTREZID","SYMBOL","GENENAME")) -> conv_table
dim(conv_table) # report the dimensions of our conversion table
summary(duplicated(conv_table$ENSEMBL))
summary(duplicated(conv_table$ENTREZID))
summary(duplicated(conv_table$SYMBOL))
conv_table[duplicated(conv_table$ENSEMBL),]
View(conv_table[duplicated(conv_table$ENSEMBL),])
head(conv_table[duplicated(conv_table$ENSEMBL),])
conv_table[c(which(duplicated(conv_table$ENSEMBL)==TRUE)),]
head(conv_table[c(which(duplicated(conv_table$ENSEMBL)==TRUE)),],20)
?which
?duplicated
conv_table[-c( # -c tells R to remove the following values
which( # which returns a list of values for which the condition is TRUE
duplicated( # duplicated returns a logical value
rosetta$ENSEMBL)==TRUE)),] -> conv_table_unique
conv_table[-c( # -c tells R to remove the following values
which( # which returns a list of values for which the condition is TRUE
duplicated( # duplicated returns a logical value
conv_table$ENSEMBL)==TRUE)),] -> conv_table_unique
summary(duplicated(conv_table_unique$ENSEMBL))
dim(conv_table_unique)
dim(conv_table_unique) == length(ensembl_key)
dim(conv_table_unique) == dim(ensembl_key)
?length
length(conv_table_unique) == length(ensembl_key)
dim(conv_table_unique$ENSEMBL) == length(ensembl_key)
dim(conv_table_unique$ENSEMBL) == dim(ensembl_key)
length(rownames(conv_table_unique)) == length(ensembl_key)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Hs.eg.db")
library(org.Hs.eg.db)
# show all identifiers available in this dataset
keytypes(org.Hs.eg.db)
# opens the help panel that describes all available identifiers in the database
help("REFSEQ")
select(org.Hs.eg.db,
keys = "ENSG00000108342", # Ensembl ID we want to find identifiers for
keytype = "ENSEMBL", # tells the function that we are using an Ensembl ID as our reference
columns = c("ENTREZID","SYMBOL","GENENAME")) # selects the identifiers we are interested in
keys(org.Hs.eg.db, # keys function returns all entries of the specified keytype
keytype = "ENSEMBL") -> ensembl_key
length(ensembl_key) # provides the number of identifiers in our key set - 40839 IDs
head(ensembl_key)
# now we can use our vector of Ensembl IDs inside the select function to build a conversion table
select(org.Hs.eg.db,
keys = ensembl_key,
keytype = "ENSEMBL",
columns = c("ENTREZID","SYMBOL","GENENAME")) -> conv_table
dim(conv_table) # report the dimensions of our conversion table
summary(duplicated(conv_table$ENSEMBL))
summary(duplicated(conv_table$ENTREZID))
summary(duplicated(conv_table$SYMBOL))
head(conv_table[duplicated(conv_table$ENSEMBL),]) # view the first six rows of duplicated IDs
conv_table[-c( # -c tells R to remove the following values
which( # which returns a list of values for which the condition is TRUE
duplicated( # duplicated returns a logical value
conv_table$ENSEMBL)==TRUE)),] -> conv_table_unique
summary(duplicated(conv_table_unique$ENSEMBL)) # no duplicates identified
length(rownames(conv_table_unique)) == length(ensembl_key) # unique table has same number of row names as our list of ensembl IDs
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt")
library(biomaRt)
## The first step is to find the names of the BioMart database Ensembl is currently providing
## show biomart options and choose one
listEnsembl()
ensembl <- useEnsembl(biomart = "genes",mirror="asia")
# there are four mirror sites can be used.
#'www', 'useast', 'asia'.
listEnsembl()
useEnsembl(biomart = "genes",
mirror = "useast") -> ensembl
useEnsembl(biomart = "genes",
mirror = "useast") -> ensembl
?useEnsembl
listDatasets(ensembl)
View(listDatasets(ensembl))
useEnsembl(biomart = "genes",
mirror = "useast",
dataset = "hsapiens_gene_ensembl")
useEnsembl(biomart = "genes",
mirror = "useast",
dataset = "hsapiens_gene_ensembl") -> ensembl
listFilters(ensembl)
View(listFilters(ensembl))
listAttributes(ensembl)
View(listAttributes(ensembl))
View(listAttributes(ensembl))
getBM(mart = ensembl,
values = c("CFTR","CXCL8"),
filters = "external_gene_name",
attributes = c("external_gene_name","ensembl_gene_id","description"),
uniqueRows = TRUE) -> biomart_output
head(biomart_output)
getBM(mart = ensembl,
values = c("CFTR","CXCL8"),
filters = "external_gene_name",
attributes = c("external_gene_name","ensembl_gene_id","description"),
uniqueRows = TRUE) -> biomart_output
head(biomart_output)
listFilters(ensembl)
getBM(mart = ensembl,
values = c("CFTR","CXCL8"),
filters = "external_gene_name",
attributes =c("external_gene_name","ensembl_gene_id","description","uniprotswissprot"),
uniqueRows = TRUE) #why does output object have two rows per item?
View(listFilters(ensembl))
getBM(mart = ensembl,
values = c("ENSG00000000971","ENSG00000004139","ENSG00000005339"),
filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","entrezgene_id","ensembl_gene_id","description"),
uniqueRows = TRUE) -> ensembl_biomart_output
BiocManager::install("org.Mm.eg.db")
library(org.Mm.eg.db)
keys(org.Mm.eg.db,
keytype = "ENSEMBL") -> Mm_key
select(org.Mm.eg.db,
keys = Mm_key,
keytype = "ENSEMBL",
columns = c("ENTREZID","SYMBOL","GENENAME","UNIPROT")) -> Mm_conv_table
Mm_conv_table[-c(which(duplicated(Mm_conv_table$ENSEMBL)==TRUE)),] -> Mm_conv_table_unique
head(Mm_conv_table_unique)
summary(duplicated(Mm_conv_table_unique$ENSEMBL))
getwd()
readRDS("data_tximport.RDS") -> txi
row.names(txi$counts)
txi$counts
rownames(txi$counts) -> txi_ensembl
keys(org.Hs.eg.db,
keytype = "ENSEMBL") -> txi_key
library(org.Hs.eg.db)
keys(org.Hs.eg.db,
keytype = "ENSEMBL") -> txi_key
select(org.Hs.eg.db,
keys = txi_key,
keytype = "ENSEMBL",
columns=c("ENTREZID","SYMBOL","GENENAME")) -> txi_table
txi_table[-c(which(duplicated(txi_table$ENSEMBL)==TRUE)),] -> txi_table_unique
summary(duplicated(txi_table_unique$ENSEMBL))
View(txi_table_unique)
getBM(mart = ensembl,
values = txi_key,
filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","entrezgene_id","description","external_gene_name","uniprot_gn_symbol"),
uniqueRows= TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Hs.eg.db")
library(org.Hs.eg.db)
# show all identifiers available in this dataset
keytypes(org.Hs.eg.db)
# opens the help panel that describes all available identifiers in the database
help("REFSEQ")
select(org.Hs.eg.db,
keys = "ENSG00000108342", # Ensembl ID we want to find identifiers for
keytype = "ENSEMBL", # tells the function that we are using an Ensembl ID as our reference
columns = c("ENTREZID","SYMBOL","GENENAME")) # selects the identifiers we are interested in
keys(org.Hs.eg.db, # keys function returns all entries of the specified keytype
keytype = "ENSEMBL") -> ensembl_key
length(ensembl_key) # provides the number of identifiers in our key set - 40839 IDs
head(ensembl_key)
# now we can use our vector of Ensembl IDs inside the select function to build a conversion table
select(org.Hs.eg.db,
keys = ensembl_key,
keytype = "ENSEMBL",
columns = c("ENTREZID","SYMBOL","GENENAME")) -> conv_table
dim(conv_table) # report the dimensions of our conversion table
summary(duplicated(conv_table$ENSEMBL))
summary(duplicated(conv_table$ENTREZID))
summary(duplicated(conv_table$SYMBOL))
head(conv_table[duplicated(conv_table$ENSEMBL),]) # view the first six rows of duplicated IDs
conv_table[-c( # -c tells R to remove the following values
which( # which returns a list of values for which the condition is TRUE
duplicated( # duplicated returns a logical value
conv_table$ENSEMBL)==TRUE)),] -> conv_table_unique
summary(duplicated(conv_table_unique$ENSEMBL)) # no duplicates identified
length(rownames(conv_table_unique)) == length(ensembl_key) # unique table has same number of row names as our list of ensembl IDs
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt")
library(biomaRt)
listEnsembl()
useEnsembl(biomart = "genes",
mirror = "useast") -> ensembl
View(listDatasets(ensembl))
useEnsembl(biomart = "genes",
mirror = "useast",
dataset = "hsapiens_gene_ensembl") -> ensembl
View(listFilters(ensembl))
View(listAttributes(ensembl))
getBM(mart = ensembl,
values = c("CFTR","CXCL8"),
filters = "external_gene_name",
attributes = c("external_gene_name","ensembl_gene_id","description"),
uniqueRows = TRUE) -> biomart_output
head(biomart_output)
select(org.Hs.eg.db,
keys=k, keytype="ENSEMBL",
columns=c("ENTREZID","SYMBOL","GENENAME","UNIPROT")) -> conv_table
select(org.Hs.eg.db,
keys = ensembl_key,
keytype="ENSEMBL",
columns=c("ENTREZID","SYMBOL","GENENAME","UNIPROT")) -> conv_table
conv_table[-c(which(duplicated(conv_table$ENSEMBL)==TRUE)),] -> conv_table_unique
head(conv_table_unique)
summary(duplicated(conv_table_unique$ENSEMBL))
listFilters(ensembl)
getBM(mart = ensembl,
values = c("CFTR","CXCL8"),
filters = "external_gene_name",
attributes =c("external_gene_name","ensembl_gene_id","description","uniprotswissprot"),
uniqueRows = TRUE)
View(listFilters(ensembl))
getBM(mart = ensembl,
values = c("ENSG00000000971","ENSG00000004139","ENSG00000005339"),
filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","entrezgene_id","ensembl_gene_id","description"),
uniqueRows = TRUE) -> ensembl_biomart_output
BiocManager::install("org.Mm.eg.db")
library(org.Mm.eg.db)
keys(org.Mm.eg.db,
keytype = "ENSEMBL") -> Mm_key
select(org.Mm.eg.db,
keys = Mm_key,
keytype = "ENSEMBL",
columns = c("ENTREZID","SYMBOL","GENENAME","UNIPROT")) -> Mm_conv_table
Mm_conv_table[-c(which(duplicated(Mm_conv_table$ENSEMBL)==TRUE)),] -> Mm_conv_table_unique
head(Mm_conv_table_unique)
summary(duplicated(Mm_conv_table_unique$ENSEMBL))
readRDS("data_tximport.RDS") -> txi
rownames(txi$counts) -> txi_ensembl
keys(org.Hs.eg.db,
keytype = "ENSEMBL") -> txi_key
select(org.Hs.eg.db,
keys = txi_key,
keytype = "ENSEMBL",
columns=c("ENTREZID","SYMBOL","GENENAME")) -> txi_table
txi_table[-c(which(duplicated(txi_table$ENSEMBL)==TRUE)),] -> txi_table_unique
head(txi_table_unique)
summary(duplicated(txi_table_unique$ENSEMBL))
View(listAttributes(ensembl))
getBM(mart = ensembl,
values = txi_key,
filters = "ensembl_gene_id",
attributes = c("ensembl_gene_id","entrezgene_id","description","external_gene_name","uniprot_gn_symbol"),
uniqueRows= TRUE) -> txi_biomart
