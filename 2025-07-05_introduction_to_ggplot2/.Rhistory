scale_color_gradient(name = "Miles per\nUS Gallon", # \n starts a new line in the legend title
high = "purple",
low = "orange") + # change color of scale
theme_bw() +
xlab("Gross horsepower") + # add x axis title
ylab("Miles per US Gallon") + # add y axis title
theme(strip.background = element_rect(fill = "white")) -> facetPlotTidy # remove grey background from panel titles
facetPlotTidy
pdf("multi.facet.mtcars.plot.pdf", # file name to write to
height = 4, # plot height in inches
width = 6) # plot width in inches
facetPlotTidy # tell R which plot to write to file
dev.off() # this tells R that you're done creating a file
ggsave(plot = facetPlotTidy, # specify plot
"multi.facet.mtcars.plot.tiff", # specify file name
height = 4, # plot height
width = 6, # plot width
units = c("in"), # specify which units to use for height and width
device = "tiff") # specify file type for saving - ggsave will also guess depending on the extension used in file name
read.csv("cfu_counts_raw.csv") -> counts # read in counts
head(counts)
counts$time <- factor(counts$time)
counts$iron <- factor(counts$iron,
levels = c("Low iron","High iron"))
speciesCols <- c("Pseudomonas aeruginosa" = "#43ba8f",
"Staphylococcus aureus" = "#fec44f",
"Streptococcus sanguinis" = "#4292c6",
"Burkholderia orbicola" = "#d57bd4")
counts %>%
mutate(log10.cfu = log10(cfu)) %>% # create a new column with log10 CFU values
ggplot(aes(x = time,
y = log10.cfu)) +
stat_summary(geom = "ribbon",
fun.data = mean.sd,
aes(group = species, # group aesthetic specifies how the lines are joined together
fill = species),
alpha = 0.5) +
geom_line(aes(group = interaction(species,iron,tech.rep),
color = species),
linewidth = 0.1,
alpha = 0.7) +
stat_summary(geom = "line",
fun.data = mean.sd,
aes(color = species,
group = interaction(species,iron)),
linewidth = 1) +
scale_color_manual(name = "Species", # both color and fill must have the same name if we want to combine the legend
values = speciesCols) +
scale_fill_manual(name = "Species",
values = speciesCols) +
labs(x = "Time (h)", # set axis labels
y = "Log<sub>10</sub> CFU/mL") +
theme_bw() + # remove grey background
facet_grid(cols = vars(iron)) + # facet plot by high/low iron
theme(strip.background = element_rect(fill = "white", # remove grey background from facet titles
color = "black"),
legend.text = element_text(face = "italic"), # set legend font to italic
legend.position = "inside", # move legend inside bounds of plot
legend.position.inside = c(0.8,0.2), # use a vector to set x and y position (0 - 1)
legend.background = element_rect(fill = "white", # set box around legend
color = "black"),
,
axis.title.y = element_markdown()) # allow axis title to read html code for subscript
read.csv("jellybeanss.csv") -> jb
read.csv("jellybeans.csv") -> jb
ggplot(data = jb)
library(tidyverse)
ggplot(data = jb)
View(jb)
ggplot(data = jb,
aes(x = color,
y = ranking))
ggplot(data = jb,
aes(x = color,
y = ranking)) +
geom_point()
ggplot(data = jb,
aes(x = ranking,
y = sweetness)) +
geom_point()
ggplot(data = jb,
aes(x = ranking,
y = sweetness,
color = color)) +
geom_point()
jb
library(tidyver)
library(tidyverse)
remove(jb)
knitr::opts_chunk$set(echo = TRUE,
collapse = TRUE)
packages_to_install <- c("tidyverse","ggtext")
for (package in packages_to_install) {
if (!(package %in% rownames(installed.packages()))) {
install.packages(package, dependencies = TRUE)
print(paste("Installed package:", package))
} else {
print(paste(package, "is already installed"))
}
}
library(tidyverse)
library(ggtext)
head(iris) # view the first six rows of the dataframe
ggplot(data = iris, # use 'data' argument to tell ggplot which dataframe we want to plot from
mapping = aes(x = Petal.Length, # mapping determines which variables are assigned to plot elements
y = Petal.Width)) -> basicPlot
basicPlot
ggplot(data = iris,
aes(x = Petal.Length, # it is very common to see 'mapping =' omitted from the code - ggplot will accept either
y = Petal.Width)) + # use a + to add elements to your plot
geom_point() -> basicScatter
basicScatter
basicPlot +
geom_point()
ggplot(data=iris,
mapping = aes(x=Petal.Length,
y=Petal.Width,
color = Species)) + # tell ggplot that color is determined by Species variable
geom_point() -> colorScatter
colorScatter
knitr::opts_chunk$set(echo = TRUE,
collapse = TRUE)
ggplot(data=iris,
mapping = aes(x=Petal.Length,
y=Petal.Width,
color = Species)) +
geom_point() +
geom_smooth(method = lm) -> colorScatterlm
packages_to_install <- c("tidyverse","ggtext")
for (package in packages_to_install) {
if (!(package %in% rownames(installed.packages()))) {
install.packages(package, dependencies = TRUE)
print(paste("Installed package:", package))
} else {
print(paste(package, "is already installed"))
}
}
library(tidyverse)
library(ggtext)
head(iris) # view the first six rows of the dataframe
ggplot(data = iris, # use 'data' argument to tell ggplot which dataframe we want to plot from
mapping = aes(x = Petal.Length, # mapping determines which variables are assigned to plot elements
y = Petal.Width)) -> basicPlot
basicPlot
ggplot(data = iris,
aes(x = Petal.Length, # it is very common to see 'mapping =' omitted from the code - ggplot will accept either
y = Petal.Width)) + # use a + to add elements to your plot
geom_point() -> basicScatter
basicScatter
basicPlot
basicPlot +
geom_point()
ggplot(data=iris,
mapping = aes(x=Petal.Length,
y=Petal.Width,
color = Species)) + # tell ggplot that color is determined by Species variable
geom_point() -> colorScatter
colorScatter
ggplot(data=iris,
mapping = aes(x=Petal.Length,
y=Petal.Width,
color = Species)) +
geom_point() +
geom_smooth(method = lm) -> colorScatterlm
colorScatterlm
ggplot(data=iris,
mapping = aes(x=Petal.Length,
y=Petal.Width)) + # remove color from global aesthetics
geom_point(aes(color = Species)) + # set geom_point aesthetics - this will only color points
geom_smooth(method = lm) -> colorScatterlm2
colorScatterlm2
ggplot(data=iris,
mapping = aes(x=Petal.Length,
y=Petal.Width)) +
geom_point(aes(color = "blue")) +
geom_smooth(method = lm) -> basicPlotBlue
basicPlotBlue
ggplot(data = iris,
mapping = aes(x = Petal.Length,
y = Petal.Width)) +
geom_point(color = "blue", # note that these options are not parsed through the aes() argument
size = 5,
shape = 1) -> openCircleBlue
openCircleBlue
# shapes are defined by a numerical value
# available shapes can be viewed at https://www.datanovia.com/en/blog/ggplot-point-shapes-best-tips/ or by using ggpubr::show_point_shapes()
ggplot(data = iris,
mapping = aes(x = Petal.Length,
y = Petal.Width,
color = Species)) +
geom_point() +
geom_smooth(method = lm) +
scale_color_manual(name = "Iris species",
values = c("setosa" = "pink",
"versicolor" = "plum",
"virginica"="seagreen3"),
labels = c("Iris setosa",
"Iris versicolor",
"Iris virginica")) -> multiColor
multiColor
ggplot(data = iris,
mapping = aes(x = Petal.Length,
y = Petal.Width)) +
geom_point(aes(color = Petal.Length)) +
geom_smooth(method = lm) -> blueCont
blueCont
ggplot(data = iris,
mapping = aes(x = Petal.Length,
y = Petal.Width)) +
geom_point(aes(color = Sepal.Length, # color is dependent on sepal length
size = Sepal.Width)) + # point size is dependent on sepal width
geom_smooth(method = lm,
color = "black",
se = FALSE) + # change the color of the curve
scale_color_gradient(high = "purple",
low = "orange") # manually set the colors of the gradient scale
plotColors <- c("setosa" = "#648FFF",
"versicolor" = "#DC267F",
"virginica"="#FFB000")
ggplot(data = iris,
mapping = aes(x = Petal.Length,
y = Petal.Width)) +
geom_point(aes(color = Species)) +
geom_smooth(method = lm,
color = "black") +
theme_bw() + # this is a built-in theme that removes the gray plot background
scale_color_manual(values = plotColors) + # direct ggplot to our color vector
ylab("Petal width (mm)") + # change y axis label - can also be done with scales
labs(x = "Petal length (mm)",
color = "Iris species") + # change legend title - can also be done with scales as previously
ggtitle("Petal width by petal length per species") + # add plot title
theme(plot.title = element_text(hjust = 0.5)) -> multiColorTidy # center plot title
multiColorTidy
pdf("multi.color.iris.plot.lm.pdf", # file name to write to
height = 4, # plot height in inches
width = 6) # plot width in inches
multiColorTidy # tell R which plot to write to file
dev.off() # this tells R that you're done creating a file
ggsave(plot = multiColorTidy, # specify plot
"multi.color.iris.plot.lm.tiff", # specify file name
height = 4, # plot height
width = 6, # plot width
units = c("in"), # specify which units to use for height and width
device = "tiff") # specify file type for saving - ggsave will also guess depending on the extension used in file name
ggplot(data = iris,
aes(x = Species,
y = Petal.Length,
fill = Species)) +
geom_boxplot(outliers = FALSE) +
geom_point()
iris %>%
group_by(Species) %>% # group_by tells R which variable to use to group observations
summarise(mean.Petal.Length = mean(Petal.Length), # add a column containing mean values per species
standard.deviation = sd(Petal.Length)) -> irisSummary # add a column containing standard deviation
head(irisSummary)
ggplot() + # we do not want global mapping or data for this plot so none is put in the ggplot call
geom_col(data = irisSummary, # set the dataframe for the columns
aes(x = Species,
y = mean.Petal.Length,
fill = Species),
alpha = 0.5) +
geom_errorbar(data = irisSummary, # set the dataframe for the error bars
aes(x = Species,
ymin = (mean.Petal.Length - standard.deviation), # set the minimum error bar value
ymax = (mean.Petal.Length + standard.deviation)), # set the maximum error bar value
width = 0.2) +
geom_jitter(data = iris, # set the dataframe for the points
aes(x = Species,
y = Petal.Length,
color = Species),
width = 0.2, # make the total spread of the points narrower
shape = 1) # set the shape to open circle
ggplot(data = iris,
aes(x = Species,
y = Petal.Length)) +
stat_summary(geom = "col", # identify which geom we want
fun.data = mean_se, # tell stat_summary which function to apply to summarise the data
aes(fill = Species), # set aesthetics as normal
alpha = 0.5) +
stat_summary(geom = "errorbar",
fun.data = mean_se,
color = "black",
width = 0.2) +
geom_jitter(aes(color = Species),
shape = 1,
width = 0.2)
mean.sd <- function(x){
tibble(y = mean(x), # tell the function that we want a tibble output (similar to dataframe)
ymin = y - sd(x), # calculates the minimum value for error bar
ymax = y + sd(x)) # calculates the maximum value for error bar
}
ggplot(data = iris,
aes(x = Species,
y = Petal.Length)) +
stat_summary(geom = "col",
fun.data = mean.sd,
aes(fill = Species),
alpha = 0.5) +
stat_summary(geom = "errorbar",
fun.data = mean.sd,
color = "black",
width = 0.2) +
geom_jitter(aes(color = Species),
shape = 1,
width = 0.2)
head(mtcars)
ggplot(data = mtcars,
aes(x = hp,
y = mpg,
color = mpg)) +
geom_point(size = 3)
ggplot(data = mtcars,
aes(x = hp,
y = mpg,
color = mpg)) +
geom_point(size = 3) +
facet_wrap(~ vs)
ggplot(data = mtcars,
aes(x = hp,
y = mpg,
color = mpg)) +
geom_point(size = 3) +
facet_grid(cols = vars(vs), # assign a variable to the column panels
rows = vars(am)) # assign a variable to the row panels
vsLabs <- c("0" = "V-shaped",
"1" = "Straight") # create a vector that matches the binary variables to their values
amLabs <- c("0" = "Automatic",
"1" = "Manual") # do the same for the am variable
ggplot(data = mtcars,
aes(x = hp,
y = mpg,
color = mpg)) +
geom_point(size = 3) +
facet_grid(cols = vars(vs),
rows = vars(am),
labeller = labeller(.cols = vsLabs, # use the labeller function to assign these labels to the rows and columns of the plot
.rows = amLabs)) -> facetPlot
facetPlot
facetPlot +
scale_color_gradient(name = "Miles per\nUS Gallon", # \n starts a new line in the legend title
high = "purple",
low = "orange") + # change color of scale
theme_bw() +
xlab("Gross horsepower") + # add x axis title
ylab("Miles per US Gallon") + # add y axis title
theme(strip.background = element_rect(fill = "white")) -> facetPlotTidy # remove grey background from panel titles
facetPlotTidy
pdf("multi.facet.mtcars.plot.pdf", # file name to write to
height = 4, # plot height in inches
width = 6) # plot width in inches
facetPlotTidy # tell R which plot to write to file
dev.off() # this tells R that you're done creating a file
ggsave(plot = facetPlotTidy, # specify plot
"multi.facet.mtcars.plot.tiff", # specify file name
height = 4, # plot height
width = 6, # plot width
units = c("in"), # specify which units to use for height and width
device = "tiff") # specify file type for saving - ggsave will also guess depending on the extension used in file name
read.csv("cfu_counts_raw.csv") -> counts # read in counts
head(counts)
counts$time <- factor(counts$time)
counts$iron <- factor(counts$iron,
levels = c("Low iron","High iron"))
speciesCols <- c("Pseudomonas aeruginosa" = "#43ba8f",
"Staphylococcus aureus" = "#fec44f",
"Streptococcus sanguinis" = "#4292c6",
"Burkholderia orbicola" = "#d57bd4")
counts %>%
mutate(log10.cfu = log10(cfu)) %>% # create a new column with log10 CFU values
ggplot(aes(x = time,
y = log10.cfu)) +
stat_summary(geom = "ribbon",
fun.data = mean.sd,
aes(group = species, # group aesthetic specifies how the lines are joined together
fill = species),
alpha = 0.5) +
geom_line(aes(group = interaction(species,iron,tech.rep),
color = species),
linewidth = 0.1,
alpha = 0.7)
counts %>%
mutate(log10.cfu = log10(cfu)) %>% # create a new column with log10 CFU values
ggplot(aes(x = time,
y = log10.cfu)) +
stat_summary(geom = "ribbon",
fun.data = mean.sd,
aes(group = species, # group aesthetic specifies how the lines are joined together
fill = species),
alpha = 0.5) +
geom_line(aes(group = interaction(species,iron,tech.rep),
color = species),
linewidth = 0.1,
alpha = 0.7) +
stat_summary(geom = "line",
fun.data = mean.sd,
aes(color = species,
group = interaction(species,iron)),
linewidth = 1) +
scale_color_manual(name = "Species", # both color and fill must have the same name if we want to combine the legend
values = speciesCols) +
scale_fill_manual(name = "Species",
values = speciesCols)
counts %>%
mutate(log10.cfu = log10(cfu)) %>% # create a new column with log10 CFU values
ggplot(aes(x = time,
y = log10.cfu)) +
stat_summary(geom = "ribbon",
fun.data = mean.sd,
aes(group = species, # group aesthetic specifies how the lines are joined together
fill = species),
alpha = 0.5) +
geom_line(aes(group = interaction(species,iron,tech.rep),
color = species),
linewidth = 0.1,
alpha = 0.7) +
stat_summary(geom = "line",
fun.data = mean.sd,
aes(color = species,
group = interaction(species,iron)),
linewidth = 1) +
scale_color_manual(name = "Species", # both color and fill must have the same name if we want to combine the legend
values = speciesCols) +
scale_fill_manual(name = "Species",
values = speciesCols) +
labs(x = "Time (h)", # set axis labels
y = "Log<sub>10</sub> CFU/mL") +
theme_bw() + # remove grey background
facet_grid(cols = vars(iron)) + # facet plot by high/low iron
theme(strip.background = element_rect(fill = "white", # remove grey background from facet titles
color = "black"),
legend.text = element_text(face = "italic"), # set legend font to italic
legend.position = "inside", # move legend inside bounds of plot
legend.position.inside = c(0.8,0.2), # use a vector to set x and y position (0 - 1)
legend.background = element_rect(fill = "white", # set box around legend
color = "black"),
,
axis.title.y = element_markdown()) # allow axis title to read html code for subscript
dim(iris)
head(iris)
iris %>%
pivot_longer(cols = 1:4,
names_to = "measurement",
values_to = "mm")
iris %>%
pivot_longer(cols = 1:4,
names_to = "measurement",
values_to = "mm") %>%
ggplot(aes(x = Species,
y = mm,
fill = measurement)) +
stat_summary("col",
fun = mean)
iris %>%
pivot_longer(cols = 1:4,
names_to = "measurement",
values_to = "mm") %>%
group_by(species,measurement) %>%
summarise(mean = mean(mm)) %>%
ggplot(aes(x = Species,
y = mm,
fill = measurement)) +
geom_col(position = "dodge")
iris %>%
pivot_longer(cols = 1:4,
names_to = "measurement",
values_to = "mm") %>%
group_by(Species,measurement) %>%
summarise(mean = mean(mm)) %>%
ggplot(aes(x = Species,
y = mm,
fill = measurement)) +
geom_col(position = "dodge")
iris %>%
pivot_longer(cols = 1:4,
names_to = "measurement",
values_to = "mm") %>%
group_by(Species,measurement) %>%
summarise(mean = mean(mm)) %>%
ggplot(aes(x = Species,
y = mean,
fill = measurement)) +
geom_col(position = "dodge")
iris %>%
pivot_longer(cols = 1:4,
names_to = "measurement",
values_to = "mm") %>%
group_by(Species,measurement) %>%
summarise(mean = mean(mm)) %>%
ggplot(aes(x = Species,
y = mean,
fill = measurement)) +
geom_col(position = "stack")
iris %>%
pivot_longer(cols = 1:4,
names_to = "measurement",
values_to = "mm") %>%
group_by(Species,measurement) %>%
summarise(mean = mean(mm)) %>%
ggplot(aes(x = Species,
y = mean,
fill = measurement)) +
geom_col(position = "dodge")
iris %>%
pivot_longer(cols = 1:4,
names_to = "measurement",
values_to = "mm") %>%
group_by(Species,measurement) %>%
summarise(mean = mean(mm)) %>%
ggplot(aes(x = measurement,
y = mean,
fill = Species)) +
geom_col(position = "dodge")
